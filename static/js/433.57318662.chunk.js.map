{"version":3,"file":"static/js/433.57318662.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/SetContent.js"],"sourcesContent":["import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n           return <ErrorMessage/>\r\n        }\r\n        return this.props.children;    \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import img from '../../components/errorMessage/error.gif';\r\nimport './error.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img className='error-message' src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/SetContent';\r\n\r\nimport './randomchar.scss';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {process, setProcess, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    },[])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n      \r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, ViewRandomChar, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button_main\" onClick={updateChar}>\r\n                    <div className=\"inner\">Try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ViewRandomChar = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    const imgStyle = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? {objectFit: \"fill\"} : {objectFit: \"cover\"};\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt={name} className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button_main\">\r\n                        <div className=\"inner\">Homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button_secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading': \r\n            return newItemLoading ? <Component/> : <Spinner/>; \r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) =>  {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {process, setProcess, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        request(offset, true);\r\n    }, [])\r\n\r\n    const request = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(charListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const charListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList((charList) => [...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset((offset) => offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (i) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[i].classList.add('char__item_selected');\r\n        itemRefs.current[i].focus();\r\n    }\r\n  \r\n    const renderCharItems = (charList) => {\r\n        const items = charList.map(({id, name, thumbnail}, i) => {\r\n            const imgStyle = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? {objectFit: \"fill\"} : {objectFit: \"cover\"};\r\n    \r\n            return (\r\n                <CSSTransition key={i} timeout={500} classNames=\"char__item\">\r\n                    <li className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(id)\r\n                            focusOnItem(i)\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                        <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n    \r\n        return  (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderCharItems(charList), newItemLoading)\r\n    }, [process])\r\n \r\n       return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button className=\"button button_main button_long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => request(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n} \r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/SetContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null); \r\n   \r\n    const {process, setProcess, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n       return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, ViewCharInfo, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ViewCharInfo = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    const imgStyle = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? {objectFit: \"fill\"} : {objectFit: \"cover\"};\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button_main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button_secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length === 0 ? 'There is no comics with this character' : null}\r\n\r\n                {comics.map((item, i) => {\r\n                    // eslint-disable-next-line\r\n                    if (i > 9) return;\r\n                    return (\r\n                        <Link key={i} to={`/comics/${item.resourceURI.slice(item.resourceURI.lastIndexOf('/') + 1)}`} style={{'display': 'block'}}>\r\n                            <li className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        </Link>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </>\r\n    )\r\n} \r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;\r\n","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {process, setProcess, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button_secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = {({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button_main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport vision from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\"> \r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/> \r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/> \r\n                    </ErrorBoundary>\r\n                </div> \r\n            </div>\r\n            <img className=\"bg-decoration\" src={vision} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage; \r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n           return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}\r\n\r\n\r\nexport default useHttp;\r\n","import useHttp from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=e50e5a006476754f94526affa67330d3';\r\n\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const getAllCharacters = async (offset = 0) => {\r\n       const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n       return res.data.results.map(_transformChar);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformChar(res.data.results[0]);\r\n     }\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformChar);\r\n\t};\r\n\r\n    const _transformChar = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url, \r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {clearError, \r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName,\r\n            process,\r\n            setProcess};\r\n}\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;\r\n","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading': \r\n            return <Spinner/>; \r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return<ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;\r\n"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","info","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","className","src","img","alt","ViewRandomChar","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","_jsxs","style","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","process","setProcess","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","request","initial","charListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","i","current","forEach","item","classList","remove","add","focus","elements","useMemo","Spinner","Error","items","map","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","TransitionGroup","component","renderCharItems","disabled","ViewCharInfo","comics","_Fragment","Link","to","resourceURI","slice","lastIndexOf","charId","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","vision","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","_apiBase","_apiKey","_useHttp","useHttp","res","_transformChar","_ref2","_callee2","_context2","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x2","_ref5","_callee5","_context5","_x3","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}